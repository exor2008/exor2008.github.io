- title: Pleiades
  description: DIY lamp with gesture control
  status: Done
  links:
    - url: https://github.com/exor2008/pleiades
      verbose: GitHub
    - url: https://youtu.be/gmsWFZkWBEI?si=JtCGZfpYXuNEFkyy
      verbose: Demo
    - url: https://youtube.com/shorts/F5HVr7ZAOYw
      verbose: Instructions Video
  long_description: |
    A lamp based on an LED matrix running <code>Raspberry Pi Pico</code>. 
    Designed for manufacturing from widely available materials. 
    The firmware is written in the <code>Rust</code> language using the asynchronous 
    framework for embedded programming <code>Embassy</code> (Embedded Rust). 
    A driver has been written for the <code>ws2812b</code> LED device, 
    as well as the <code>APDS-9960</code> gesture sensor. Bit-banging 
    protocols are implemented using coprocessor programming (<code>PIO</code>) 
    in a specialized <code>assembly language</code>, which makes them stable and time-accurate.
    You can assemble one for yourself. Firmware and wiring scheme are free and available via <code>github</code> link.
  stack:
    - Rust
    - embedded
    - embassy
    - assembly
    - RP2040

- title: Flight control software
  description: Based on RP PI Pico and Rust
  status: Work in progress
  links:
    - url: https://github.com/exor2008/drone
      verbose: GitHub
    - url: https://youtu.be/3mVxf-AE9MU
      verbose: Demo
  long_description: |
    A project to develop a flight controller based on the <code>Raspberry Pi Pico</code> platform and 
    firmware for it in <code>Rust</code> language.
    The 10 degrees of freedom IMU <code>MPU-9250</code> module (3-axis accelerometer, gyroscope and magnetometer) is used as a sensor.
    At the moment, a driver has been written for the <code>MPU-9250</code> along calibration algorithms for each sensor. 
    Data fusion is also implemented using the <code>Mahony filter</code>. 
    FC can now determine <code>attitude</code> relative to the earth's magnetic field.
    Debug panel was written in <code>Python</code> in both web and desktop versions.
    In the future, a <code>PID</code> motor control loop will be developed.
  stack:
    - RP2040
    - Rust
    - JavaScript
    - THREE.js
    - Python
    - embedded
    - embassy

- title: Fluid simulator
  description: Powered by CUDA parallel computations
  status: Done
  links:
    - url: https://github.com/exor2008/fluid-proto
      verbose: Prototype
    - url: https://github.com/exor2008/fluid-simulator
      verbose: GitHub
    - url: https://youtu.be/pCPggrFf64g
      verbose: Demo
  long_description: |
    A fluid simulator based on the <code>Navier-Stokes Equations</code>.
    It is made in the form of a mathematical module on <code>Rust + CUDA</code>, 
    a service that provides an API to this module on the <code>Rocket</code> web framework and a 
    frontend on <code>THREE.js</code> for displaying fluid flow in 3D. The calculation is performed in 
    parallel on <code>CUDA</code> kernels, which allows to observe the fluid in real time.
    The scene with the initial conditions is uploaded in <code>gltf</code> format. 
    After loading, the <code>3D model</code> is mapped to the calculated grid. 
    The normals of the model are taken into account to calculate <code>collisions</code> of solids with a fluid.
    Such simulators are used by <code>NASA</code> to calculate the <code>aerodynamic</code> qualities of spacecraft, 
    as well as to <code>predict the weather</code>.
  stack:
    - Rust
    - Rocket
    - CUDA
    - JavaScript
    - THREE.js
    - Python
    - gltf

- title: 1:1 Scale Planetarium
  description: Physical model of solar system
  status: Done
  links:
    - url: https://github.com/exor2008/solar-system-sim
      verbose: GitHub
    - url: https://youtu.be/HT2_h-bOYAo
      verbose: Demo
  long_description: |
    Most often, the scale is not observed in the image of the <code>Solar system</code>. 
    This is due to the fact that the distances between the planets are incomparably greater than their radiuses.
    But thanks to computer interactive models, we have the opportunity to observe the real size of objects.
    This project is a <code>simulator</code> of the Solar system, where all objects have values <code>as in nature</code>: 
    <code>the radiuses, masses and velocities of objects, the size and inclination of their orbits</code>.
    Thanks to a realistic physical model, it is possible to simulate "What if..." scenarios. 
    What if we put a <code>black hole</code> in the center of our solar system, 
    what if the speed of the <code>Earth</code> is 10 times less than in reality, etc.
    Thanks to the architecture of the <code>Bevy Entity-Component-System</code> game engine, 
    we can simulate tens of thousands of objects simultaneously in real time.
  stack:
    - Rust
    - Bevy game engine

- title: Game console
  description: Based on RP PI Pico and Rust
  status: Work in progress
  links:
    - url: https://github.com/exor2008/koldun
      verbose: GitHub
  long_description: |
    DIY game console based on <code>RP PICO</code> platform and <code>Rust</code> language. <br/>
    Solved tasks: 
    <ul>
    <li><code>Driver</code> has been written for the display on the <code>ILI9486</code> chip</li>
    <li>Fitting game logic and graphics in <code>256 Kb SRAM</code> and <code>2Mb FLASH</code> memory</li>
    </ul>
    The driver for the display is written using a coprocessor (<code>PIO</code>) in a <code>specialized assembler</code>, 
    which allows to display dynamic graphics with a high screen refresh rate.
  stack:
    - RP2040
    - Rust
    - embedded
    - embassy

- title: Set of discord and telegram bots
  description: For document management automation and AI
  status: Done
  links:
    - url: https://github.com/exor2008/health_care_autofiller
      verbose: Telegram document bot
    - url: https://github.com/exor2008/google-ai-bot-demo
      verbose: Discord API for Google PaLM AI
    - url: https://github.com/exor2008/ai-discord-bot-demo
      verbose: Discord API for OpenAI ChatGPT
  long_description: |
    A set of <code>Discord</code> and <code>Telegram</code> bots for solving a number of tasks: 
    from document management automation to providing <code>APIs</code> to well-known <code>AI</code> services.
  stack:
    - Python
    - Discord
    - Telegram
    - AI
